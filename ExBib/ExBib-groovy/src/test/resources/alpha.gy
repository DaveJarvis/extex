// BibTeX standard bibliography style `alpha'
// version 0.99a for BibTeX versions 0.99a or later, LaTeX version 2.09.
// Copyright (C) 1985, all rights reserved.
// Copying of this file is authorized only if either
// (1) you make absolutely no changes to your copy, including name, or
// (2) if you do make changes, you name it something other than
// btxbst.doc, plain.bst, unsrt.bst, alpha.bst, and abbrv.bst.
// This restriction helps ensure that all standard styles are identical.
// The file btxbst.doc has the documentation for this style.
// 
import org.extex.exbib.core.Processor
import org.extex.exbib.core.bst.code.impl.ChangeCase
import org.extex.exbib.core.bst.code.impl.FormatName
import org.extex.exbib.core.bst.code.impl.NumNames
import org.extex.exbib.core.bst.code.impl.Purify
import org.extex.exbib.core.bst.code.impl.Substring
import org.extex.exbib.core.bst.code.impl.TextLength
import org.extex.exbib.core.bst.code.impl.TextPrefix
import org.extex.exbib.core.bst.code.impl.Width
import org.extex.exbib.core.db.DB
import org.extex.exbib.core.db.Entry
import org.extex.exbib.core.io.Writer

class Style {

  DB bibDB
  Writer bibWriter
  Processor bibProcessor

  int outputState = 0
  int beforeAll = 0
  int midSentence = 0
  int afterSentence = 0
  int afterBlock = 0
  int nameptr = 0
  int namesleft = 0
  int numnames = 0
  int multiresult = 0
  int len = 0
  int etAlCharUsed = 0
  int longestLabelWidth = 0
  int lastExtraNum = 0

  String s = ''
  String t = ''
  String longestLabel = ''
  String lastSortLabel = ''
  String nextExtra = ''

  Map types = [
    article : { entry -> article(entry, '') },
    book : { entry -> book(entry, '') },
    booklet : { entry -> booklet(entry, '') },
    'calc.label' : { entry -> calcLabel(entry) },
    conference : { entry -> conference(entry, '', '') },
    'default.type' : { entry -> defaultType(entry, '') },
    'either.or.check' : { entry -> eitherOrCheck(entry, '', '') },
    'empty.misc.check' : { entry -> emptyMiscCheck(entry) },
    'forward.pass' : { entry -> forwardPass(entry) },
    inbook : { entry -> inbook(entry, '') },
    incollection : { entry -> incollection(entry, '', '') },
    inproceedings : { entry -> inproceedings(entry, '', '') },
    manual : { entry -> manual(entry, '') },
    mastersthesis : { entry -> mastersthesis(entry, '') },
    misc : { entry -> misc(entry, '') },
    phdthesis : { entry -> phdthesis(entry, '') },
    presort : { entry -> presort(entry) },
    proceedings : { entry -> proceedings(entry, '') },
    'reverse.pass' : { entry -> reversePass(entry) },
    techreport : { entry -> techreport(entry, '') },
    unpublished : { entry -> unpublished(entry, '') },
  ]

  Style(bibDB, bibWriter, bibProcessor) {
    this.bibDB = bibDB
    this.bibWriter = bibWriter
    this.bibProcessor = bibProcessor
    [
      scp: "Science of Computer Programming",
      jcss: "Journal of Computer and System Sciences",
      ieeetc: "IEEE Transactions on Computers",
      tog: "ACM Transactions on Graphics",
      tods: "ACM Transactions on Database Systems",
      ipl: "Information Processing Letters",
      dec: "December",
      ibmsj: "IBM Systems Journal",
      toplas: "ACM Transactions on Programming Languages and Systems",
      ibmjrd: "IBM Journal of Research and Development",
      ieeetcad: "IEEE Transactions on Computer-Aided Design of Integrated Circuits",
      mar: "March",
      jan: "January",
      cacm: "Communications of the ACM",
      may: "May",
      apr: "April",
      ieeese: "IEEE Transactions on Software Engineering",
      jul: "July",
      acta: "Acta Informatica",
      jun: "June",
      tocs: "ACM Transactions on Computer Systems",
      toms: "ACM Transactions on Mathematical Software",
      oct: "October",
      acmcs: "ACM Computing Surveys",
      feb: "February",
      nov: "November",
      sicomp: "SIAM Journal on Computing",
      sep: "September",
      aug: "August",
      toois: "ACM Transactions on Office Information Systems",
      jacm: "Journal of the ACM",
      tcs: "Theoretical Computer Science",
    ].each { name, value ->
      bibDB.storeString(name, value)
    }
  }

  private static final int GLOBAL_MAX = 65535

  private static final int ENTRY_MAX = 65535

  boolean isEmpty(String s) {
    return s == null || s.trim() == ''
  }

  void callType(Entry entry) {
    def typeFunction = types[entry.getType()]
    if (typeFunction == null) {
      typeFunction = types['default.type']
      if (typeFunction == null) {
        bstProcessor.warning('missing default.type')
        return
      }
    }
    typeFunction(entry)
    }
  }

  String addPeriod(String s) {
    return s == null || s == '' ? '' : s.matches(".*[.!?]") ? s : s + "."
  }

  void initStateConsts() {
    beforeAll = 0
    midSentence = 1
    afterSentence = 2
    afterBlock = 3
  }

  String outputNonnull(v1, v2) {
    s = v1
    if (outputState == midSentence) {
      bibWriter.print(v2 + ", ")
    } else {
      if (outputState == afterBlock) {
        bibWriter.println(addPeriod(v2))
        bibWriter.print("\\newblock ")
      } else if (outputState == beforeAll) {
        bibWriter.print(v2)
      } else {
        bibWriter.print(addPeriod(v2) + " ")
      }
      outputState = midSentence
    }
    return s
  }

  String output(v2, v4) {
    return ( isEmpty(v2) ? v4 : outputNonnull(v4,
                                              v2) )
  }

  String outputCheck(entry, v1, v3, v5) {
    t = v1
    String v9
    if (isEmpty(v3)) {
      bibProcessor.warning("empty " + t + " in " + entry.getKey())
      v9 = v5
    } else {
      v9 = outputNonnull(v5,
                         v3)
    }
    return v9
  }

  String outputBibitem(entry) {
    bibWriter.println()
    bibWriter.println("\\bibitem[",
                      entry.getLocalString("label"),
                      "]{",
                      entry.getKey(),
                      "}")
    outputState = beforeAll
    return ""
  }

  void finEntry(v1) {
    bibWriter.println(addPeriod(v1))
  }

  void newBlock() {
    if (outputState != beforeAll) {
      outputState = afterBlock
    }
  }

  void newSentence() {
    if (outputState != afterBlock && outputState != beforeAll) {
      outputState = afterSentence
    }
  }

  int not(v1) {
    return ( v1 ? 0 : 1 )
  }

  int and(v1, v2) {
    return ( v1 ? v2 : 0 )
  }

  int or(v1, v2) {
    return ( v1 ? 1 : v2 )
  }

  void newBlockChecka(v1) {
    if (! isEmpty(v1)) {
      newBlock()
    }
  }

  void newBlockCheckb(v1, v2) {
    if (! and(isEmpty(v1) ? 1 : 0,
              isEmpty(v2) ? 1 : 0)) {
      newBlock()
    }
  }

  void newSentenceChecka(v1) {
    if (! isEmpty(v1)) {
      newSentence()
    }
  }

  void newSentenceCheckb(v1, v2) {
    if (! and(isEmpty(v1) ? 1 : 0,
              isEmpty(v2) ? 1 : 0)) {
      newSentence()
    }
  }

  String fieldOrNull(v2) {
    return ( isEmpty(v2) ? "" : v2 )
  }

  String emphasize(v2) {
    return ( isEmpty(v2) ? "" : "{\\em " + v2 + "}" )
  }

  String formatNames(v1, v2) {
    s = v1
    nameptr = 1
    numnames = NumNames.numNames(s)
    namesleft = numnames
    while (namesleft > 0) {
      t = FormatName.formatName(s,
                                nameptr,
                                "{ff~}{vv~}{ll}{, jj}")
      String v18
      if (nameptr > 1) {
        String v15
        if (namesleft > 1) {
          v15 = v2 + ", " + t
        } else {
          String v8 = ( numnames > 2 ? v2 + "," : v2 )
          v15 = ( t == "others" ? v8 + " et~al." : v8 + " and " + t )
        }
        v18 = v15
      } else {
        v18 = t
      }
      nameptr = nameptr + 1
      namesleft = namesleft - 1
      v2 = v18
    }
    return v2
  }

  String formatAuthors(entry, v1) {
    return ( isEmpty(entry.getExpanded("author",
                                       bibDB))
             ? ""
             : formatNames(v1,
                           entry.getExpanded("author",
                                             bibDB)) )
  }

  String formatEditors(entry, v1) {
    String v8
    if (isEmpty(entry.getExpanded("editor",
                                  bibDB))) {
      v8 = ""
    } else {
      String v2 = formatNames(v1,
                              entry.getExpanded("editor",
                                                bibDB))
      v8 = ( NumNames.numNames(entry.getExpanded("editor",
                                                 bibDB)) > 1
             ? v2 + ", editors"
             : v2 + ", editor" )
    }
    return v8
  }

  String formatTitle(entry) {
    return ( isEmpty(entry.getExpanded("title",
                                       bibDB))
             ? ""
             : ChangeCase.changeCase("t",
                                     entry.getExpanded("title",
                                                       bibDB)) )
  }

  String nDashify(v1) {
    t = v1
    String v2 = ""
    while (not(isEmpty(t) ? 1 : 0)) {
      String v12
      if (Substring.substring(t,
                              1,
                              1) == "-") {
        String v8
        if (not(Substring.substring(t,
                                    1,
                                    2) == "--" ? 1 : 0)) {
          String v3 = v2 + "--"
          t = Substring.substring(t,
                                  2,
                                  GLOBAL_MAX)
          v8 = v3
        } else {
          while (Substring.substring(t,
                                     1,
                                     1) == "-") {
            String v5 = v2 + "-"
            t = Substring.substring(t,
                                    2,
                                    GLOBAL_MAX)
            v2 = v5
          }
          v8 = v2
        }
        v12 = v8
      } else {
        String v10 = v2 + Substring.substring(t,
                                              1,
                                              1)
        t = Substring.substring(t,
                                2,
                                GLOBAL_MAX)
        v12 = v10
      }
      v2 = v12
    }
    return v2
  }

  String formatDate(entry) {
    String v6
    if (isEmpty(entry.getExpanded("year",
                                  bibDB))) {
      String v2
      if (isEmpty(entry.getExpanded("month",
                                    bibDB))) {
        v2 = ""
      } else {
        bibProcessor.warning("there's a month but no year in " + entry.getKey())
        v2 = entry.getExpanded("month",
                               bibDB)
      }
      v6 = v2
    } else {
      v6 = ( isEmpty(entry.getExpanded("month",
                                       bibDB))
             ? entry.getExpanded("year",
                                 bibDB)
             : entry.getExpanded("month",
                                 bibDB) + " " + entry.getExpanded("year",
                                                                  bibDB) )
    }
    return v6
  }

  String formatBtitle(entry) {
    return emphasize(entry.getExpanded("title",
                                       bibDB))
  }

  String tieOrSpaceConnect(v1, v3) {
    String v2 = ( TextLength.textLength(v1) < 3
                  ? "~"
                  : " " )
    return v3 + v2 + v1
  }

  void eitherOrCheck(entry, v1, v2) {
    if (! isEmpty(v1)) {
      bibProcessor.warning("can't use both " + v2 + " fields in " + entry.getKey())
    }
  }

  String formatBvolume(entry) {
    String v5
    if (isEmpty(entry.getExpanded("volume",
                                  bibDB))) {
      v5 = ""
    } else {
      String v1 = tieOrSpaceConnect("volume",
                                    entry.getExpanded("volume",
                                                      bibDB))
      String v4 = ( isEmpty(entry.getExpanded("series",
                                              bibDB))
                    ? v1
                    : v1 + " of " + emphasize(entry.getExpanded("series",
                                                                bibDB)) )
      eitherOrCheck(entry,
                    "volume and number",
                    entry.getExpanded("number",
                                      bibDB))
      v5 = v4
    }
    return v5
  }

  String formatNumberSeries(entry) {
    String v8
    if (isEmpty(entry.getExpanded("volume",
                                  bibDB))) {
      String v7
      if (isEmpty(entry.getExpanded("number",
                                    bibDB))) {
        v7 = fieldOrNull(entry.getExpanded("series",
                                           bibDB))
      } else {
        String v1 = ( outputState == midSentence
                      ? "number"
                      : "Number" )
        String v2 = tieOrSpaceConnect(v1,
                                      entry.getExpanded("number",
                                                        bibDB))
        String v5
        if (isEmpty(entry.getExpanded("series",
                                      bibDB))) {
          bibProcessor.warning("there's a number but no series in " + entry.getKey())
          v5 = v2
        } else {
          v5 = v2 + " in " + entry.getExpanded("series",
                                               bibDB)
        }
        v7 = v5
      }
      v8 = v7
    } else {
      v8 = ""
    }
    return v8
  }

  String formatEdition(entry) {
    return ( isEmpty(entry.getExpanded("edition",
                                       bibDB))
             ? ""
             : ( outputState == midSentence
                 ? ChangeCase.changeCase("l",
                                         entry.getExpanded("edition",
                                                           bibDB)) + " edition"
                 : ChangeCase.changeCase("t",
                                         entry.getExpanded("edition",
                                                           bibDB)) + " edition" ) )
  }

  int multiPageCheck(v1) {
    t = v1
    multiresult = 0
    while (and(not(multiresult),
               not(isEmpty(t) ? 1 : 0))) {
      if (or(Substring.substring(t,
                                 1,
                                 1) == "-" ? 1 : 0,
             or(Substring.substring(t,
                                    1,
                                    1) == "," ? 1 : 0,
                Substring.substring(t,
                                    1,
                                    1) == "+" ? 1 : 0))) {
        multiresult = 1
      } else {
        t = Substring.substring(t,
                                2,
                                GLOBAL_MAX)
      }
    }
    return multiresult
  }

  String formatPages(entry) {
    return ( isEmpty(entry.getExpanded("pages",
                                       bibDB))
             ? ""
             : ( multiPageCheck(entry.getExpanded("pages",
                                                  bibDB))
                 ? tieOrSpaceConnect("pages",
                                     nDashify(entry.getExpanded("pages",
                                                                bibDB)))
                 : tieOrSpaceConnect("page",
                                     entry.getExpanded("pages",
                                                       bibDB)) ) )
  }

  String formatVolNumPages(entry) {
    String v1 = fieldOrNull(entry.getExpanded("volume",
                                              bibDB))
    String v6
    if (isEmpty(entry.getExpanded("number",
                                  bibDB))) {
      v6 = v1
    } else {
      String v2 = v1 + "(" + entry.getExpanded("number",
                                               bibDB) + ")"
      if (isEmpty(entry.getExpanded("volume",
                                    bibDB))) {
        bibProcessor.warning("there's a number but no volume in " + entry.getKey())
      }
      v6 = v2
    }
    return ( isEmpty(entry.getExpanded("pages",
                                       bibDB))
             ? v6
             : ( isEmpty(v6) ? formatPages(entry) : v6 + ":" + nDashify(entry.getExpanded("pages",
                                                                                          bibDB)) ) )
  }

  String formatChapterPages(entry) {
    String v8
    if (isEmpty(entry.getExpanded("chapter",
                                  bibDB))) {
      v8 = formatPages(entry)
    } else {
      String v2 = ( isEmpty(entry.getExpanded("type",
                                              bibDB))
                    ? "chapter"
                    : ChangeCase.changeCase("l",
                                            entry.getExpanded("type",
                                                              bibDB)) )
      String v3 = tieOrSpaceConnect(v2,
                                    entry.getExpanded("chapter",
                                                      bibDB))
      v8 = ( isEmpty(entry.getExpanded("pages",
                                       bibDB))
             ? v3
             : v3 + ", " + formatPages(entry) )
    }
    return v8
  }

  String formatInEdBooktitle(entry, v1) {
    return ( isEmpty(entry.getExpanded("booktitle",
                                       bibDB))
             ? ""
             : ( isEmpty(entry.getExpanded("editor",
                                           bibDB))
                 ? "In " + emphasize(entry.getExpanded("booktitle",
                                                       bibDB))
                 : v1 + formatEditors(entry,
                                      "In ") + ", " + emphasize(entry.getExpanded("booktitle",
                                                                                  bibDB)) ) )
  }

  void emptyMiscCheck(entry) {
    if (and(and(isEmpty(entry.getExpanded("author",
                                          bibDB)) ? 1 : 0,
                and(isEmpty(entry.getExpanded("title",
                                              bibDB)) ? 1 : 0,
                    and(isEmpty(entry.getExpanded("howpublished",
                                                  bibDB)) ? 1 : 0,
                        and(isEmpty(entry.getExpanded("month",
                                                      bibDB)) ? 1 : 0,
                            and(isEmpty(entry.getExpanded("year",
                                                          bibDB)) ? 1 : 0,
                                isEmpty(entry.getExpanded("note",
                                                          bibDB)) ? 1 : 0))))),
            not(isEmpty(entry.getExpanded("key",
                                          bibDB)) ? 1 : 0))) {
      bibProcessor.warning("all relevant fields are empty in " + entry.getKey())
    }
  }

  String formatThesisType(entry, v1) {
    return ( isEmpty(entry.getExpanded("type",
                                       bibDB))
             ? v1
             : ChangeCase.changeCase("t",
                                     entry.getExpanded("type",
                                                       bibDB)) )
  }

  String formatTrNumber(entry) {
    String v3 = ( isEmpty(entry.getExpanded("type",
                                            bibDB))
                  ? "Technical Report"
                  : entry.getExpanded("type",
                                      bibDB) )
    return ( isEmpty(entry.getExpanded("number",
                                       bibDB))
             ? ChangeCase.changeCase("t",
                                     v3)
             : tieOrSpaceConnect(v3,
                                 entry.getExpanded("number",
                                                   bibDB)) )
  }

  String formatArticleCrossref(entry) {
    String v4
    if (isEmpty(entry.getExpanded("key",
                                  bibDB))) {
      String v2
      if (isEmpty(entry.getExpanded("journal",
                                    bibDB))) {
        bibProcessor.warning("need key or journal for " + entry.getKey() + " to crossref " + entry.getExpanded("crossref",
                                                                                                               bibDB))
        v2 = ""
      } else {
        v2 = "In {\\em " + entry.getExpanded("journal",
                                             bibDB) + "\\/}"
      }
      v4 = v2
    } else {
      v4 = "In " + entry.getExpanded("key",
                                     bibDB)
    }
    return v4 + " \\cite{" + entry.getExpanded("crossref",
                                               bibDB) + "}"
  }

  String formatCrossrefEditor(entry) {
    String v2 = FormatName.formatName(entry.getExpanded("editor",
                                                        bibDB),
                                      1,
                                      "{vv~}{ll}")
    String v1 = NumNames.numNames(entry.getExpanded("editor",
                                                    bibDB))
    return ( NumNames.numNames(entry.getExpanded("editor",
                                                 bibDB)) > 2
             ? v2 + " et~al."
             : ( v1 < 2 ? v2 : ( FormatName.formatName(entry.getExpanded("editor",
                                                                         bibDB),
                                                       2,
                                                       "{ff }{vv }{ll}{ jj}") == "others"
                                 ? v2 + " et~al."
                                 : v2 + " and " + FormatName.formatName(entry.getExpanded("editor",
                                                                                          bibDB),
                                                                        2,
                                                                        "{vv~}{ll}") ) ) )
  }

  String formatBookCrossref(entry) {
    String v3
    if (isEmpty(entry.getExpanded("volume",
                                  bibDB))) {
      bibProcessor.warning("empty volume in " + entry.getKey() + "'s crossref of " + entry.getExpanded("crossref",
                                                                                                       bibDB))
      v3 = "In "
    } else {
      v3 = tieOrSpaceConnect("Volume",
                             entry.getExpanded("volume",
                                               bibDB)) + " of "
    }
    String v15
    if (or(isEmpty(entry.getExpanded("editor",
                                     bibDB)) ? 1 : 0,
           fieldOrNull(entry.getExpanded("editor",
                                         bibDB)) == fieldOrNull(entry.getExpanded("author",
                                                                                  bibDB)) ? 1 : 0)) {
      String v12
      if (isEmpty(entry.getExpanded("key",
                                    bibDB))) {
        String v8
        if (isEmpty(entry.getExpanded("series",
                                      bibDB))) {
          bibProcessor.warning("need editor, key, or series for " + entry.getKey() + " to crossref " + entry.getExpanded("crossref",
                                                                                                                         bibDB))
          v8 = v3 + ""
        } else {
          v8 = v3 + "{\\em " + entry.getExpanded("series",
                                                 bibDB) + "\\/}"
        }
        v12 = v8
      } else {
        v12 = v3 + entry.getExpanded("key",
                                     bibDB)
      }
      v15 = v12
    } else {
      v15 = v3 + formatCrossrefEditor(entry)
    }
    return v15 + " \\cite{" + entry.getExpanded("crossref",
                                                bibDB) + "}"
  }

  String formatIncollInprocCrossref(entry) {
    String v6
    if (or(isEmpty(entry.getExpanded("editor",
                                     bibDB)) ? 1 : 0,
           fieldOrNull(entry.getExpanded("editor",
                                         bibDB)) == fieldOrNull(entry.getExpanded("author",
                                                                                  bibDB)) ? 1 : 0)) {
      String v4
      if (isEmpty(entry.getExpanded("key",
                                    bibDB))) {
        String v2
        if (isEmpty(entry.getExpanded("booktitle",
                                      bibDB))) {
          bibProcessor.warning("need editor, key, or booktitle for " + entry.getKey() + " to crossref " + entry.getExpanded("crossref",
                                                                                                                            bibDB))
          v2 = ""
        } else {
          v2 = "In {\\em " + entry.getExpanded("booktitle",
                                               bibDB) + "\\/}"
        }
        v4 = v2
      } else {
        v4 = "In " + entry.getExpanded("key",
                                       bibDB)
      }
      v6 = v4
    } else {
      v6 = "In " + formatCrossrefEditor(entry)
    }
    return v6 + " \\cite{" + entry.getExpanded("crossref",
                                               bibDB) + "}"
  }

  void article(entry, v1) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v4 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    String v8 = ( entry.getExpanded("crossref",
                                    bibDB) == null
                  ? outputCheck(entry,
                                output(outputCheck(entry,
                                                   v4,
                                                   emphasize(entry.getExpanded("journal",
                                                                               bibDB)),
                                                   "journal"),
                                       formatVolNumPages(entry)),
                                formatDate(entry),
                                "year")
                  : output(outputNonnull(v4,
                                         formatArticleCrossref(entry)),
                           formatPages(entry)) )
    newBlock()
    finEntry(output(v8,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void book(entry, v2) {
    String v1 = outputBibitem(entry)
    String v8
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      v8 = outputCheck(entry,
                       v2,
                       formatEditors(entry,
                                     v1),
                       "author and editor")
    } else {
      String v5 = outputNonnull(v2,
                                formatAuthors(entry,
                                              v1))
      if (entry.getExpanded("crossref",
                            bibDB) == null) {
        eitherOrCheck(entry,
                      "author and editor",
                      entry.getExpanded("editor",
                                        bibDB))
      }
      v8 = v5
    }
    newBlock()
    String v9 = outputCheck(entry,
                            v8,
                            formatBtitle(entry),
                            "title")
    String v15
    if (entry.getExpanded("crossref",
                          bibDB) == null) {
      String v10 = output(v9,
                          formatBvolume(entry))
      newBlock()
      String v11 = output(v10,
                          formatNumberSeries(entry))
      newSentence()
      v15 = output(outputCheck(entry,
                               v11,
                               entry.getExpanded("publisher",
                                                 bibDB),
                               "publisher"),
                   entry.getExpanded("address",
                                     bibDB))
    } else {
      newBlock()
      v15 = outputNonnull(v9,
                          formatBookCrossref(entry))
    }
    String v16 = outputCheck(entry,
                             output(v15,
                                    formatEdition(entry)),
                             formatDate(entry),
                             "year")
    newBlock()
    finEntry(output(v16,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void booklet(entry, v1) {
    String v2 = output(v1,
                       formatAuthors(entry,
                                     outputBibitem(entry)))
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlockCheckb(entry.getExpanded("howpublished",
                                     bibDB),
                   entry.getExpanded("address",
                                     bibDB))
    String v4 = output(output(output(v3,
                                     entry.getExpanded("howpublished",
                                                       bibDB)),
                              entry.getExpanded("address",
                                                bibDB)),
                       formatDate(entry))
    newBlock()
    finEntry(output(v4,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void inbook(entry, v2) {
    String v1 = outputBibitem(entry)
    String v8
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      v8 = outputCheck(entry,
                       v2,
                       formatEditors(entry,
                                     v1),
                       "author and editor")
    } else {
      String v5 = outputNonnull(v2,
                                formatAuthors(entry,
                                              v1))
      if (entry.getExpanded("crossref",
                            bibDB) == null) {
        eitherOrCheck(entry,
                      "author and editor",
                      entry.getExpanded("editor",
                                        bibDB))
      }
      v8 = v5
    }
    newBlock()
    String v9 = outputCheck(entry,
                            v8,
                            formatBtitle(entry),
                            "title")
    String v16
    if (entry.getExpanded("crossref",
                          bibDB) == null) {
      String v10 = outputCheck(entry,
                               output(v9,
                                      formatBvolume(entry)),
                               formatChapterPages(entry),
                               "chapter and pages")
      newBlock()
      String v11 = output(v10,
                          formatNumberSeries(entry))
      newSentence()
      v16 = output(outputCheck(entry,
                               v11,
                               entry.getExpanded("publisher",
                                                 bibDB),
                               "publisher"),
                   entry.getExpanded("address",
                                     bibDB))
    } else {
      String v13 = outputCheck(entry,
                               v9,
                               formatChapterPages(entry),
                               "chapter and pages")
      newBlock()
      v16 = outputNonnull(v13,
                          formatBookCrossref(entry))
    }
    String v17 = outputCheck(entry,
                             output(v16,
                                    formatEdition(entry)),
                             formatDate(entry),
                             "year")
    newBlock()
    finEntry(output(v17,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void incollection(entry, v1, v5) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    String v11
    if (entry.getExpanded("crossref",
                          bibDB) == null) {
      String v6 = output(output(output(outputCheck(entry,
                                                   v5,
                                                   formatInEdBooktitle(entry,
                                                                       v3),
                                                   "booktitle"),
                                       formatBvolume(entry)),
                                formatNumberSeries(entry)),
                         formatChapterPages(entry))
      newSentence()
      v11 = outputCheck(entry,
                        output(output(outputCheck(entry,
                                                  v6,
                                                  entry.getExpanded("publisher",
                                                                    bibDB),
                                                  "publisher"),
                                      entry.getExpanded("address",
                                                        bibDB)),
                               formatEdition(entry)),
                        formatDate(entry),
                        "year")
    } else {
      v11 = output(outputNonnull(v3,
                                 formatIncollInprocCrossref(entry)),
                   formatChapterPages(entry))
    }
    newBlock()
    finEntry(output(v11,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void inproceedings(entry, v1, v5) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    String v15
    if (entry.getExpanded("crossref",
                          bibDB) == null) {
      String v6 = output(output(output(outputCheck(entry,
                                                   v5,
                                                   formatInEdBooktitle(entry,
                                                                       v3),
                                                   "booktitle"),
                                       formatBvolume(entry)),
                                formatNumberSeries(entry)),
                         formatPages(entry))
      String v11
      if (isEmpty(entry.getExpanded("address",
                                    bibDB))) {
        newSentenceCheckb(entry.getExpanded("organization",
                                            bibDB),
                          entry.getExpanded("publisher",
                                            bibDB))
        v11 = outputCheck(entry,
                          output(output(v6,
                                        entry.getExpanded("organization",
                                                          bibDB)),
                                 entry.getExpanded("publisher",
                                                   bibDB)),
                          formatDate(entry),
                          "year")
      } else {
        String v8 = outputCheck(entry,
                                outputNonnull(v6,
                                              entry.getExpanded("address",
                                                                bibDB)),
                                formatDate(entry),
                                "year")
        newSentence()
        v11 = output(output(v8,
                            entry.getExpanded("organization",
                                              bibDB)),
                     entry.getExpanded("publisher",
                                       bibDB))
      }
      v15 = v11
    } else {
      v15 = output(outputNonnull(v3,
                                 formatIncollInprocCrossref(entry)),
                   formatPages(entry))
    }
    newBlock()
    finEntry(output(v15,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void conference(entry, v1, v2) {
    inproceedings(entry,
                  v2,
                  v1)
  }

  void manual(entry, v7) {
    String v1 = outputBibitem(entry)
    String v10 = ( isEmpty(entry.getExpanded("author",
                                             bibDB))
                   ? ( isEmpty(entry.getExpanded("organization",
                                                 bibDB))
                       ? v1
                       : output(outputNonnull(v1,
                                              entry.getExpanded("organization",
                                                                bibDB)),
                                entry.getExpanded("address",
                                                  bibDB)) )
                   : outputNonnull(v7,
                                   formatAuthors(entry,
                                                 v1)) )
    newBlock()
    String v11 = outputCheck(entry,
                             v10,
                             formatBtitle(entry),
                             "title")
    String v18
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      String v15
      if (isEmpty(entry.getExpanded("organization",
                                    bibDB))) {
        newBlockChecka(entry.getExpanded("address",
                                         bibDB))
        v15 = output(v11,
                     entry.getExpanded("address",
                                       bibDB))
      } else {
        v15 = v11
      }
      v18 = v15
    } else {
      newBlockCheckb(entry.getExpanded("organization",
                                       bibDB),
                     entry.getExpanded("address",
                                       bibDB))
      v18 = output(output(v11,
                          entry.getExpanded("organization",
                                            bibDB)),
                   entry.getExpanded("address",
                                     bibDB))
    }
    String v19 = output(output(v18,
                               formatEdition(entry)),
                        formatDate(entry))
    newBlock()
    finEntry(output(v19,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void mastersthesis(entry, v1) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    String v4 = outputCheck(entry,
                            output(outputCheck(entry,
                                               outputNonnull(v3,
                                                             formatThesisType(entry,
                                                                              "Master's thesis")),
                                               entry.getExpanded("school",
                                                                 bibDB),
                                               "school"),
                                   entry.getExpanded("address",
                                                     bibDB)),
                            formatDate(entry),
                            "year")
    newBlock()
    finEntry(output(v4,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void misc(entry, v1) {
    String v2 = output(v1,
                       formatAuthors(entry,
                                     outputBibitem(entry)))
    newBlockCheckb(entry.getExpanded("title",
                                     bibDB),
                   entry.getExpanded("howpublished",
                                     bibDB))
    String v3 = output(v2,
                       formatTitle(entry))
    newBlockChecka(entry.getExpanded("howpublished",
                                     bibDB))
    String v4 = output(output(v3,
                              entry.getExpanded("howpublished",
                                                bibDB)),
                       formatDate(entry))
    newBlock()
    finEntry(output(v4,
                    entry.getExpanded("note",
                                      bibDB)))
    emptyMiscCheck(entry)
  }

  void phdthesis(entry, v1) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatBtitle(entry),
                            "title")
    newBlock()
    String v4 = outputCheck(entry,
                            output(outputCheck(entry,
                                               outputNonnull(v3,
                                                             formatThesisType(entry,
                                                                              "PhD thesis")),
                                               entry.getExpanded("school",
                                                                 bibDB),
                                               "school"),
                                   entry.getExpanded("address",
                                                     bibDB)),
                            formatDate(entry),
                            "year")
    newBlock()
    finEntry(output(v4,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void proceedings(entry, v3) {
    String v1 = outputBibitem(entry)
    String v7 = ( isEmpty(entry.getExpanded("editor",
                                            bibDB))
                  ? output(v1,
                           entry.getExpanded("organization",
                                             bibDB))
                  : outputNonnull(v3,
                                  formatEditors(entry,
                                                v1)) )
    newBlock()
    String v8 = output(output(outputCheck(entry,
                                          v7,
                                          formatBtitle(entry),
                                          "title"),
                              formatBvolume(entry)),
                       formatNumberSeries(entry))
    String v21
    if (isEmpty(entry.getExpanded("address",
                                  bibDB))) {
      String v12
      if (isEmpty(entry.getExpanded("editor",
                                    bibDB))) {
        newSentenceChecka(entry.getExpanded("publisher",
                                            bibDB))
        v12 = v8
      } else {
        newSentenceCheckb(entry.getExpanded("organization",
                                            bibDB),
                          entry.getExpanded("publisher",
                                            bibDB))
        v12 = output(v8,
                     entry.getExpanded("organization",
                                       bibDB))
      }
      v21 = outputCheck(entry,
                        output(v12,
                               entry.getExpanded("publisher",
                                                 bibDB)),
                        formatDate(entry),
                        "year")
    } else {
      String v14 = outputCheck(entry,
                               outputNonnull(v8,
                                             entry.getExpanded("address",
                                                               bibDB)),
                               formatDate(entry),
                               "year")
      newSentence()
      String v18 = ( isEmpty(entry.getExpanded("editor",
                                               bibDB))
                     ? v14
                     : output(v14,
                              entry.getExpanded("organization",
                                                bibDB)) )
      v21 = output(v18,
                   entry.getExpanded("publisher",
                                     bibDB))
    }
    newBlock()
    finEntry(output(v21,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void techreport(entry, v1) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    String v4 = outputCheck(entry,
                            output(outputCheck(entry,
                                               outputNonnull(v3,
                                                             formatTrNumber(entry)),
                                               entry.getExpanded("institution",
                                                                 bibDB),
                                               "institution"),
                                   entry.getExpanded("address",
                                                     bibDB)),
                            formatDate(entry),
                            "year")
    newBlock()
    finEntry(output(v4,
                    entry.getExpanded("note",
                                      bibDB)))
  }

  void unpublished(entry, v1) {
    String v2 = outputCheck(entry,
                            v1,
                            formatAuthors(entry,
                                          outputBibitem(entry)),
                            "author")
    newBlock()
    String v3 = outputCheck(entry,
                            v2,
                            formatTitle(entry),
                            "title")
    newBlock()
    finEntry(output(outputCheck(entry,
                                v3,
                                entry.getExpanded("note",
                                                  bibDB),
                                "note"),
                    formatDate(entry)))
  }

  void defaultType(entry, v1) {
    misc(entry,
         v1)
  }

  String sortify(v1) {
    return ChangeCase.changeCase("l",
                                 Purify.purify(v1))
  }

  String chopWord(v1, v2, v3) {
    s = v1
    len = v2
    return ( v3 == Substring.substring(s,
                                       1,
                                       len)
             ? Substring.substring(s,
                                   len + 1,
                                   GLOBAL_MAX)
             : s )
  }

  void initializeEtAlCharUsed() {
    etAlCharUsed = 0
  }

  String formatLabNames(v1) {
    s = v1
    numnames = NumNames.numNames(s)
    String v20
    if (numnames > 1) {
      if (numnames > 4) {
        namesleft = 3
      } else {
        namesleft = numnames
      }
      nameptr = 1
      String v12 = ""
      while (namesleft > 0) {
        String v11
        if (nameptr == numnames) {
          String v7
          if (FormatName.formatName(s,
                                    nameptr,
                                    "{ff }{vv }{ll}{ jj}") == "others") {
            String v3 = v12 + "{\\etalchar{+}}"
            etAlCharUsed = 1
            v7 = v3
          } else {
            v7 = v12 + FormatName.formatName(s,
                                             nameptr,
                                             "{v{}}{l{}}")
          }
          v11 = v7
        } else {
          v11 = v12 + FormatName.formatName(s,
                                            nameptr,
                                            "{v{}}{l{}}")
        }
        nameptr = nameptr + 1
        namesleft = namesleft - 1
        v12 = v11
      }
      String v15
      if (numnames > 4) {
        String v13 = v12 + "{\\etalchar{+}}"
        etAlCharUsed = 1
        v15 = v13
      } else {
        v15 = v12
      }
      v20 = v15
    } else {
      String v16 = FormatName.formatName(s,
                                         1,
                                         "{v{}}{l{}}")
      v20 = ( TextLength.textLength(FormatName.formatName(s,
                                                          1,
                                                          "{v{}}{l{}}")) < 2
              ? TextPrefix.textPrefix(FormatName.formatName(s,
                                                            1,
                                                            "{ll}"),
                                      3)
              : v16 )
    }
    return v20
  }

  String authorKeyLabel(entry) {
    return ( isEmpty(entry.getExpanded("author",
                                       bibDB))
             ? ( isEmpty(entry.getExpanded("key",
                                           bibDB))
                 ? Substring.substring(entry.getKey(),
                                       1,
                                       3)
                 : TextPrefix.textPrefix(entry.getExpanded("key",
                                                           bibDB),
                                         3) )
             : formatLabNames(entry.getExpanded("author",
                                                bibDB)) )
  }

  String authorEditorKeyLabel(entry) {
    return ( isEmpty(entry.getExpanded("author",
                                       bibDB))
             ? ( isEmpty(entry.getExpanded("editor",
                                           bibDB))
                 ? ( isEmpty(entry.getExpanded("key",
                                               bibDB))
                     ? Substring.substring(entry.getKey(),
                                           1,
                                           3)
                     : TextPrefix.textPrefix(entry.getExpanded("key",
                                                               bibDB),
                                             3) )
                 : formatLabNames(entry.getExpanded("editor",
                                                    bibDB)) )
             : formatLabNames(entry.getExpanded("author",
                                                bibDB)) )
  }

  String authorKeyOrganizationLabel(entry) {
    return ( isEmpty(entry.getExpanded("author",
                                       bibDB))
             ? ( isEmpty(entry.getExpanded("key",
                                           bibDB))
                 ? ( isEmpty(entry.getExpanded("organization",
                                               bibDB))
                     ? Substring.substring(entry.getKey(),
                                           1,
                                           3)
                     : TextPrefix.textPrefix(chopWord("The ",
                                                      4,
                                                      entry.getExpanded("organization",
                                                                        bibDB)),
                                             3) )
                 : TextPrefix.textPrefix(entry.getExpanded("key",
                                                           bibDB),
                                         3) )
             : formatLabNames(entry.getExpanded("author",
                                                bibDB)) )
  }

  String editorKeyOrganizationLabel(entry) {
    return ( isEmpty(entry.getExpanded("editor",
                                       bibDB))
             ? ( isEmpty(entry.getExpanded("key",
                                           bibDB))
                 ? ( isEmpty(entry.getExpanded("organization",
                                               bibDB))
                     ? Substring.substring(entry.getKey(),
                                           1,
                                           3)
                     : TextPrefix.textPrefix(chopWord("The ",
                                                      4,
                                                      entry.getExpanded("organization",
                                                                        bibDB)),
                                             3) )
                 : TextPrefix.textPrefix(entry.getExpanded("key",
                                                           bibDB),
                                         3) )
             : formatLabNames(entry.getExpanded("editor",
                                                bibDB)) )
  }

  void calcLabel(entry) {
    String v7 = ( or(entry.getType() == "book" ? 1 : 0,
                     entry.getType() == "inbook" ? 1 : 0)
                  ? authorEditorKeyLabel(entry)
                  : ( entry.getType() == "proceedings"
                      ? editorKeyOrganizationLabel(entry)
                      : ( entry.getType() == "manual"
                          ? authorKeyOrganizationLabel(entry)
                          : authorKeyLabel(entry) ) ) )
    entry.setLocal("label",
                   v7 + Substring.substring(Purify.purify(fieldOrNull(entry.getExpanded("year",
                                                                                        bibDB))),
                                            -1,
                                            2))
    entry.setLocal("sort.label",
                   sortify(v7 + Substring.substring(Purify.purify(fieldOrNull(entry.getExpanded("year",
                                                                                                bibDB))),
                                                    -1,
                                                    4)))
  }

  String sortFormatNames(v1) {
    s = v1
    nameptr = 1
    numnames = NumNames.numNames(s)
    namesleft = numnames
    String v2 = ""
    while (namesleft > 0) {
      String v7 = ( nameptr > 1 ? v2 + "   " : v2 )
      t = FormatName.formatName(s,
                                nameptr,
                                "{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}")
      String v11 = ( and(nameptr == numnames ? 1 : 0,
                         t == "others" ? 1 : 0)
                     ? v7 + "et al"
                     : v7 + sortify(t) )
      nameptr = nameptr + 1
      namesleft = namesleft - 1
      v2 = v11
    }
    return v2
  }

  String sortFormatTitle(v1) {
    t = v1
    return Substring.substring(sortify(chopWord("A ",
                                                2,
                                                chopWord("An ",
                                                         3,
                                                         chopWord("The ",
                                                                  4,
                                                                  t)))),
                               1,
                               GLOBAL_MAX)
  }

  String authorSort(entry) {
    String v4
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      String v2
      if (isEmpty(entry.getExpanded("key",
                                    bibDB))) {
        bibProcessor.warning("to sort, need author or key in " + entry.getKey())
        v2 = ""
      } else {
        v2 = sortify(entry.getExpanded("key",
                                       bibDB))
      }
      v4 = v2
    } else {
      v4 = sortFormatNames(entry.getExpanded("author",
                                             bibDB))
    }
    return v4
  }

  String authorEditorSort(entry) {
    String v6
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      String v4
      if (isEmpty(entry.getExpanded("editor",
                                    bibDB))) {
        String v2
        if (isEmpty(entry.getExpanded("key",
                                      bibDB))) {
          bibProcessor.warning("to sort, need author, editor, or key in " + entry.getKey())
          v2 = ""
        } else {
          v2 = sortify(entry.getExpanded("key",
                                         bibDB))
        }
        v4 = v2
      } else {
        v4 = sortFormatNames(entry.getExpanded("editor",
                                               bibDB))
      }
      v6 = v4
    } else {
      v6 = sortFormatNames(entry.getExpanded("author",
                                             bibDB))
    }
    return v6
  }

  String authorOrganizationSort(entry) {
    String v6
    if (isEmpty(entry.getExpanded("author",
                                  bibDB))) {
      String v4
      if (isEmpty(entry.getExpanded("organization",
                                    bibDB))) {
        String v2
        if (isEmpty(entry.getExpanded("key",
                                      bibDB))) {
          bibProcessor.warning("to sort, need author, organization, or key in " + entry.getKey())
          v2 = ""
        } else {
          v2 = sortify(entry.getExpanded("key",
                                         bibDB))
        }
        v4 = v2
      } else {
        v4 = sortify(chopWord("The ",
                              4,
                              entry.getExpanded("organization",
                                                bibDB)))
      }
      v6 = v4
    } else {
      v6 = sortFormatNames(entry.getExpanded("author",
                                             bibDB))
    }
    return v6
  }

  String editorOrganizationSort(entry) {
    String v6
    if (isEmpty(entry.getExpanded("editor",
                                  bibDB))) {
      String v4
      if (isEmpty(entry.getExpanded("organization",
                                    bibDB))) {
        String v2
        if (isEmpty(entry.getExpanded("key",
                                      bibDB))) {
          bibProcessor.warning("to sort, need editor, organization, or key in " + entry.getKey())
          v2 = ""
        } else {
          v2 = sortify(entry.getExpanded("key",
                                         bibDB))
        }
        v4 = v2
      } else {
        v4 = sortify(chopWord("The ",
                              4,
                              entry.getExpanded("organization",
                                                bibDB)))
      }
      v6 = v4
    } else {
      v6 = sortFormatNames(entry.getExpanded("editor",
                                             bibDB))
    }
    return v6
  }

  void presort(entry) {
    calcLabel(entry)
    String v8 = entry.getLocalString("sort.label") + "    "
    String v7 = ( or(entry.getType() == "book" ? 1 : 0,
                     entry.getType() == "inbook" ? 1 : 0)
                  ? authorEditorSort(entry)
                  : ( entry.getType() == "proceedings"
                      ? editorOrganizationSort(entry)
                      : ( entry.getType() == "manual"
                          ? authorOrganizationSort(entry)
                          : authorSort(entry) ) ) )
    entry.setLocal("sort.key\$",
                   Substring.substring(v8 + v7 + "    " + sortify(fieldOrNull(entry.getExpanded("year",
                                                                                                bibDB))) + "    " + sortFormatTitle(fieldOrNull(entry.getExpanded("title",
                                                                                                                                                                  bibDB))),
                                       1,
                                       ENTRY_MAX))
  }

  void initializeLongestLabel() {
    longestLabel = ""
    lastSortLabel = Character.toString((char)(0))
    nextExtra = ""
    longestLabelWidth = 0
    lastExtraNum = 0
  }

  void forwardPass(entry) {
    if (lastSortLabel == entry.getLocalString("sort.label")) {
      lastExtraNum = lastExtraNum + 1
      entry.setLocal("extra.label",
                     Character.toString((char)(lastExtraNum)))
    } else {
      lastExtraNum = 97
      entry.setLocal("extra.label",
                     "")
      lastSortLabel = entry.getLocalString("sort.label")
    }
  }

  void reversePass(entry) {
    if (nextExtra == "b") {
      entry.setLocal("extra.label",
                     "a")
    }
    entry.setLocal("label",
                   entry.getLocalString("label") + entry.getLocalString("extra.label"))
    if (Width.width(entry.getLocalString("label")) > longestLabelWidth) {
      longestLabel = entry.getLocalString("label")
      longestLabelWidth = Width.width(entry.getLocalString("label"))
    }
    nextExtra = entry.getLocalString("extra.label")
  }

  void beginBib() {
    if (etAlCharUsed) {
      bibWriter.println("\\newcommand{\\etalchar}[1]{\$^{#1}\$}")
    }
    if (! isEmpty(bibDB.getPreambleExpanded())) {
      bibWriter.println(bibDB.getPreambleExpanded())
    }
    bibWriter.println("\\begin{thebibliography}{" + longestLabel + "}")
  }

  void endBib() {
    bibWriter.println()
    bibWriter.println("\\end{thebibliography}")
  }

  void run() {
    // read()
    initializeEtAlCharUsed()
    bibDB.each {
      presort(it)
    }
    bibDB.sort()
    initializeLongestLabel()
    bibDB.each {
      forwardPass(it)
    }
    bibDB.getEntries().reverse().each {
      reversePass(it)
    }
    beginBib()
    initStateConsts()
    bibDB.each {
      callType(it)
    }
    endBib()
  }

}

new Style(bibDB, bibWriter, bibProcessor).run()
